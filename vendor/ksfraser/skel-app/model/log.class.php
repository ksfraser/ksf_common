<?php 
//This file was generated by calling php /var/www/html/codemeta/generator.php interapp 

//this script may only be included - so its better to die if called directly.
if ( strpos( $_SERVER["SCRIPT_NAME"], basename(__FILE__) ) !== false ) {
  header( "location: ../index.php" );
  exit;
}

class log extends generictable 
{
          private $observers;
         var $data; //data passed in by other calls         var $date;
		 /*date */
         var $query;
		 /*query */
         var $user;
		 /*user */
         var $log_id;
		 /*row */
         function __constructor()
         {
         $this->querytablename = 'log';
         $this->fieldspec['date']['metadata_id'] = '3077';
         $this->fieldspec['date']['table_name'] = 'log';
         $this->fieldspec['date']['column_name'] = 'date';
         $this->fieldspec['date']['pretty_name'] = 'date';
         $this->fieldspec['date']['abstract_data_type'] = 'timestamp';
         $this->fieldspec['date']['db_data_type'] = 'timestamp';
         $this->fieldspec['date']['field_null'] = 'NO';
         $this->fieldspec['date']['field_key'] = '';
         $this->fieldspec['date']['extra_sql'] = ' ';
         $this->fieldspec['date']['html_form_type'] = 'datetime';
         $this->fieldspec['date']['html_form_options'] = ' ';
         $this->fieldspec['date']['html_form_explanation'] = ' ';
         $this->fieldspec['date']['help_text'] = ' ';
         $this->fieldspec['date']['mandatory_p'] = 'Y';
         $this->fieldspec['date']['sort_key'] = '0';
         $this->fieldspec['date']['form_sort_key'] = '0';
         $this->fieldspec['date']['form_number'] = '1';
         $this->fieldspec['date']['default_value'] = 'CURRENT_TIMESTAMP';
         $this->fieldspec['date']['field_toupper'] = 'NO';
         $this->fieldspec['date']['validationprocname'] = ' ';
         $this->fieldspec['date']['c_size'] = '16';
         $this->fieldspec['date']['prikey'] = 'N';
         $this->fieldspec['date']['noedit'] = 'Y';
         $this->fieldspec['date']['nodisplay'] = 'Y';
         $this->fieldspec['date']['c_unsigned'] = 'N';
         $this->fieldspec['date']['c_zerofill'] = 'N';
         $this->fieldspec['date']['c_auto_increment'] = 'N';
         $this->fieldspec['date']['foreign_table'] = '';
         $this->fieldspec['date']['foreign_key'] = '';
         $this->fieldspec['date']['application'] = 'interapp';
         $this->fieldspec['date']['issearchable'] = '1';
         $this->fieldspec['date']['preinserttrigger'] = '';
         $this->fieldspec['date']['postinserttrigger'] = '';
         $this->fieldspec['date']['preupdatetrigger'] = '';
         $this->fieldspec['date']['postupdatetrigger'] = '';
         $this->fieldspec['date']['predeletetrigger'] = '';
         $this->fieldspec['date']['postdeletetrigger'] = '';
         $this->fieldspec['query']['metadata_id'] = '3078';
         $this->fieldspec['query']['table_name'] = 'log';
         $this->fieldspec['query']['column_name'] = 'query';
         $this->fieldspec['query']['pretty_name'] = 'query';
         $this->fieldspec['query']['abstract_data_type'] = 'text';
         $this->fieldspec['query']['db_data_type'] = 'varchar';
         $this->fieldspec['query']['field_null'] = 'NO';
         $this->fieldspec['query']['field_key'] = '';
         $this->fieldspec['query']['extra_sql'] = ' ';
         $this->fieldspec['query']['html_form_type'] = 'text';
         $this->fieldspec['query']['html_form_options'] = ' ';
         $this->fieldspec['query']['html_form_explanation'] = ' ';
         $this->fieldspec['query']['help_text'] = ' ';
         $this->fieldspec['query']['mandatory_p'] = 'Y';
         $this->fieldspec['query']['sort_key'] = '0';
         $this->fieldspec['query']['form_sort_key'] = '0';
         $this->fieldspec['query']['form_number'] = '1';
         $this->fieldspec['query']['default_value'] = '';
         $this->fieldspec['query']['field_toupper'] = 'NO';
         $this->fieldspec['query']['validationprocname'] = ' ';
         $this->fieldspec['query']['c_size'] = '2550';
         $this->fieldspec['query']['prikey'] = 'N';
         $this->fieldspec['query']['noedit'] = 'Y';
         $this->fieldspec['query']['nodisplay'] = 'N';
         $this->fieldspec['query']['c_unsigned'] = 'N';
         $this->fieldspec['query']['c_zerofill'] = 'N';
         $this->fieldspec['query']['c_auto_increment'] = 'N';
         $this->fieldspec['query']['foreign_table'] = '';
         $this->fieldspec['query']['foreign_key'] = '';
         $this->fieldspec['query']['application'] = 'interapp';
         $this->fieldspec['query']['issearchable'] = '1';
         $this->fieldspec['query']['preinserttrigger'] = '';
         $this->fieldspec['query']['postinserttrigger'] = '';
         $this->fieldspec['query']['preupdatetrigger'] = '';
         $this->fieldspec['query']['postupdatetrigger'] = '';
         $this->fieldspec['query']['predeletetrigger'] = '';
         $this->fieldspec['query']['postdeletetrigger'] = '';
         $this->fieldspec['user']['metadata_id'] = '3079';
         $this->fieldspec['user']['table_name'] = 'log';
         $this->fieldspec['user']['column_name'] = 'user';
         $this->fieldspec['user']['pretty_name'] = 'user';
         $this->fieldspec['user']['abstract_data_type'] = 'text';
         $this->fieldspec['user']['db_data_type'] = 'varchar';
         $this->fieldspec['user']['field_null'] = 'NO';
         $this->fieldspec['user']['field_key'] = '';
         $this->fieldspec['user']['extra_sql'] = ' ';
         $this->fieldspec['user']['html_form_type'] = 'text';
         $this->fieldspec['user']['html_form_options'] = ' ';
         $this->fieldspec['user']['html_form_explanation'] = ' ';
         $this->fieldspec['user']['help_text'] = ' ';
         $this->fieldspec['user']['mandatory_p'] = 'Y';
         $this->fieldspec['user']['sort_key'] = '0';
         $this->fieldspec['user']['form_sort_key'] = '0';
         $this->fieldspec['user']['form_number'] = '1';
         $this->fieldspec['user']['default_value'] = '';
         $this->fieldspec['user']['field_toupper'] = 'NO';
         $this->fieldspec['user']['validationprocname'] = ' ';
         $this->fieldspec['user']['c_size'] = '45';
         $this->fieldspec['user']['prikey'] = 'N';
         $this->fieldspec['user']['noedit'] = 'Y';
         $this->fieldspec['user']['nodisplay'] = 'N';
         $this->fieldspec['user']['c_unsigned'] = 'N';
         $this->fieldspec['user']['c_zerofill'] = 'N';
         $this->fieldspec['user']['c_auto_increment'] = 'N';
         $this->fieldspec['user']['foreign_table'] = '';
         $this->fieldspec['user']['foreign_key'] = '';
         $this->fieldspec['user']['application'] = 'interapp';
         $this->fieldspec['user']['issearchable'] = '1';
         $this->fieldspec['user']['preinserttrigger'] = '';
         $this->fieldspec['user']['postinserttrigger'] = '';
         $this->fieldspec['user']['preupdatetrigger'] = '';
         $this->fieldspec['user']['postupdatetrigger'] = '';
         $this->fieldspec['user']['predeletetrigger'] = '';
         $this->fieldspec['user']['postdeletetrigger'] = '';
         $this->fieldspec['log_id']['metadata_id'] = '3080';
         $this->fieldspec['log_id']['table_name'] = 'log';
         $this->fieldspec['log_id']['column_name'] = 'log_id';
         $this->fieldspec['log_id']['pretty_name'] = 'row';
         $this->fieldspec['log_id']['abstract_data_type'] = 'int';
         $this->fieldspec['log_id']['db_data_type'] = 'int';
         $this->fieldspec['log_id']['field_null'] = 'NO';
         $this->fieldspec['log_id']['field_key'] = '';
         $this->fieldspec['log_id']['extra_sql'] = ' ';
         $this->fieldspec['log_id']['html_form_type'] = 'integer';
         $this->fieldspec['log_id']['html_form_options'] = ' ';
         $this->fieldspec['log_id']['html_form_explanation'] = ' ';
         $this->fieldspec['log_id']['help_text'] = ' ';
         $this->fieldspec['log_id']['mandatory_p'] = 'N';
         $this->fieldspec['log_id']['sort_key'] = '0';
         $this->fieldspec['log_id']['form_sort_key'] = '0';
         $this->fieldspec['log_id']['form_number'] = '1';
         $this->fieldspec['log_id']['default_value'] = '';
         $this->fieldspec['log_id']['field_toupper'] = 'NO';
         $this->fieldspec['log_id']['validationprocname'] = ' ';
         $this->fieldspec['log_id']['c_size'] = '8';
         $this->fieldspec['log_id']['prikey'] = 'Y';
         $this->fieldspec['log_id']['noedit'] = 'Y';
         $this->fieldspec['log_id']['nodisplay'] = 'Y';
         $this->fieldspec['log_id']['c_unsigned'] = 'N';
         $this->fieldspec['log_id']['c_zerofill'] = 'N';
         $this->fieldspec['log_id']['c_auto_increment'] = 'Y';
         $this->fieldspec['log_id']['foreign_table'] = '';
         $this->fieldspec['log_id']['foreign_key'] = '';
         $this->fieldspec['log_id']['application'] = 'interapp';
         $this->fieldspec['log_id']['issearchable'] = '0';
         $this->fieldspec['log_id']['preinserttrigger'] = '';
         $this->fieldspec['log_id']['postinserttrigger'] = '';
         $this->fieldspec['log_id']['preupdatetrigger'] = '';
         $this->fieldspec['log_id']['postupdatetrigger'] = '';
         $this->fieldspec['log_id']['predeletetrigger'] = '';
         $this->fieldspec['log_id']['postdeletetrigger'] = '';
         $this->fieldlist = array('date', 'query', 'user', 'log_id');
         $this->searchlist = array('date', 'query', 'user', );
	         return SUCCESS;
         }
         function log()
         { //For older php which doesn't have constructor
              return $this->__constructor();
         }
         function Push()
         {
	         $_SESSION['log'] = serialize($this);
	         return SUCCESS;
         }
         function Pop()
         {
                 //Can't do this in self - this is how to do it outside
	       //  $this = unserialize($_SESSION['log']);
	         return SUCCESS;
         }
         function ObserverRegister( $observer, $event )
         {
                 $this->observers[$event][] = $observer;
	         return SUCCESS;
         }
         function ObserverDeRegister( $observer )
         {
                 $this->observers[] = array_diff( $this->observers, array( $observer) );
	         return SUCCESS;
         }
         function ObserverNotify( $event, $msg )
         {
                 if ( isset( $this->observers[$event] ) )
                 	foreach ( $this->observers[$event] as $obs ) 
                 	{
                      		$obs->notify( $event, $msg );
                 	}
                 /* '**' being used as 'ALL' */
                 if ( isset( $this->observers['**'] ) )
                 	foreach ( $this->observers['**'] as $obs ) 
                 	{
                      		$obs->notify( $event, $msg );
                 	}
	         return SUCCESS;
         }
         function notify( $object )
         {
                 //Called when another object we are observing sends us a notification
	         return SUCCESS;
         }
         function PredateInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PredateInsert ) )
	            return PredateInsert( $this );
                 else return;
         }
         function PostdateInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PredateInsert ) )
	            return PredateInsert( $this );
                 else return;
         }
         function PredateUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PredateUpdate ) )
	            return PredateUpdate( $this );
                 else return;
         }
         function PostdateUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PredateUpdate ) )
	            return PredateUpdate( $this );
                 else return;
         }
         function PredateDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PredateDelete ) )
	            return PredateDelete( $this );
                 else return;
         }
         function PostdateDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PredateDelete ) )
	            return PredateDelete( $this );
                 else return;
         }
         function Setdate($value)
         {
                 $this->date = $value;
	          return SUCCESS;
         }
         function Getdate()
         {
                    return $this->date;
         }
         function PrequeryInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PrequeryInsert ) )
	            return PrequeryInsert( $this );
                 else return;
         }
         function PostqueryInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PrequeryInsert ) )
	            return PrequeryInsert( $this );
                 else return;
         }
         function PrequeryUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PrequeryUpdate ) )
	            return PrequeryUpdate( $this );
                 else return;
         }
         function PostqueryUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PrequeryUpdate ) )
	            return PrequeryUpdate( $this );
                 else return;
         }
         function PrequeryDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PrequeryDelete ) )
	            return PrequeryDelete( $this );
                 else return;
         }
         function PostqueryDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PrequeryDelete ) )
	            return PrequeryDelete( $this );
                 else return;
         }
         function Setquery($value)
         {
                 $this->query = $value;
	          return SUCCESS;
         }
         function Getquery()
         {
                    return $this->query;
         }
         function PreuserInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreuserInsert ) )
	            return PreuserInsert( $this );
                 else return;
         }
         function PostuserInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreuserInsert ) )
	            return PreuserInsert( $this );
                 else return;
         }
         function PreuserUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreuserUpdate ) )
	            return PreuserUpdate( $this );
                 else return;
         }
         function PostuserUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreuserUpdate ) )
	            return PreuserUpdate( $this );
                 else return;
         }
         function PreuserDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreuserDelete ) )
	            return PreuserDelete( $this );
                 else return;
         }
         function PostuserDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreuserDelete ) )
	            return PreuserDelete( $this );
                 else return;
         }
         function Setuser($value)
         {
                 $this->user = $value;
	          return SUCCESS;
         }
         function Getuser()
         {
                    return $this->user;
         }
         function Prelog_idInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( Prelog_idInsert ) )
	            return Prelog_idInsert( $this );
                 else return;
         }
         function Postlog_idInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( Prelog_idInsert ) )
	            return Prelog_idInsert( $this );
                 else return;
         }
         function Prelog_idUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( Prelog_idUpdate ) )
	            return Prelog_idUpdate( $this );
                 else return;
         }
         function Postlog_idUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( Prelog_idUpdate ) )
	            return Prelog_idUpdate( $this );
                 else return;
         }
         function Prelog_idDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( Prelog_idDelete ) )
	            return Prelog_idDelete( $this );
                 else return;
         }
         function Postlog_idDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( Prelog_idDelete ) )
	            return Prelog_idDelete( $this );
                 else return;
         }
         function Setlog_id($value)
         {
                 $this->log_id = $value;
	          return SUCCESS;
         }
         function Getlog_id()
         {
                    return $this->log_id;
         }
} /* class log */
