<?php 
//This file was generated by calling php /var/www/html/skel-app/generator.php acl 

//this script may only be included - so its better to die if called directly.
if ( strpos( $_SERVER["SCRIPT_NAME"], basename(__FILE__) ) !== false ) {
  header( "location: ../index.php" );
  exit;
}

include_once('roletask.extend.php');

class roletask extends generictable 
{
         private $observers;
         var $data; //data passed in by other calls
         var $idroletask;
		 /*Index */
         var $roles_id;
		 /*Role */
         var $idtasks;
		 /*Task */
         function __construct()
         {
         	$this->querytablename = 'roletask';
         	$this->fieldspec['idroletask']['metadata_id'] = '2884';
         	$this->fieldspec['idroletask']['table_name'] = 'roletask';
         	$this->fieldspec['idroletask']['column_name'] = 'idroletask';
         	$this->fieldspec['idroletask']['pretty_name'] = 'Index';
         	$this->fieldspec['idroletask']['abstract_data_type'] = 'index';
         	$this->fieldspec['idroletask']['db_data_type'] = 'integer';
         	$this->fieldspec['idroletask']['field_null'] = 'NO';
         	$this->fieldspec['idroletask']['field_key'] = '0';
         	$this->fieldspec['idroletask']['extra_sql'] = ' ';
         	$this->fieldspec['idroletask']['html_form_type'] = 'hidden';
         	$this->fieldspec['idroletask']['html_form_options'] = ' ';
         	$this->fieldspec['idroletask']['html_form_explanation'] = ' ';
         	$this->fieldspec['idroletask']['help_text'] = ' ';
         	$this->fieldspec['idroletask']['mandatory_p'] = 'Y';
         	$this->fieldspec['idroletask']['sort_key'] = '0';
         	$this->fieldspec['idroletask']['form_sort_key'] = '0';
         	$this->fieldspec['idroletask']['form_number'] = '1';
         	$this->fieldspec['idroletask']['default_value'] = '0';
         	$this->fieldspec['idroletask']['field_toupper'] = 'NO';
         	$this->fieldspec['idroletask']['validationprocname'] = ' ';
         	$this->fieldspec['idroletask']['c_size'] = '8';
         	$this->fieldspec['idroletask']['prikey'] = 'Y';
         	$this->fieldspec['idroletask']['noedit'] = 'Y';
         	$this->fieldspec['idroletask']['nodisplay'] = 'N';
         	$this->fieldspec['idroletask']['c_unsigned'] = 'N';
         	$this->fieldspec['idroletask']['c_zerofill'] = 'N';
         	$this->fieldspec['idroletask']['c_auto_increment'] = 'N';
         	$this->fieldspec['idroletask']['foreign_table'] = '';
         	$this->fieldspec['idroletask']['foreign_key'] = '';
         	$this->fieldspec['idroletask']['application'] = 'acl';
         	$this->fieldspec['idroletask']['issearchable'] = '1';
         	$this->fieldspec['idroletask']['preinserttrigger'] = '';
         	$this->fieldspec['idroletask']['postinserttrigger'] = '';
         	$this->fieldspec['idroletask']['preupdatetrigger'] = '';
         	$this->fieldspec['idroletask']['postupdatetrigger'] = '';
         	$this->fieldspec['idroletask']['predeletetrigger'] = '';
         	$this->fieldspec['idroletask']['postdeletetrigger'] = '';
         	$this->fieldspec['idroletask']['postinsert'] = 'PostidroletaskInsert';
         	$this->fieldspec['idroletask']['postupdate'] = 'PostidroletaskUpdate';
         	$this->fieldspec['idroletask']['postdelete'] = 'PostidroletaskDelete';
         	$this->fieldspec['idroletask']['preinsert'] = 'PreidroletaskInsert';
         	$this->fieldspec['idroletask']['preupdate'] = 'PreidroletaskUpdate';
         	$this->fieldspec['idroletask']['predelete'] = 'PreidroletaskDelete';
         	$this->fieldspec['roles_id']['metadata_id'] = '2885';
         	$this->fieldspec['roles_id']['table_name'] = 'roletask';
         	$this->fieldspec['roles_id']['column_name'] = 'roles_id';
         	$this->fieldspec['roles_id']['pretty_name'] = 'Role';
         	$this->fieldspec['roles_id']['abstract_data_type'] = 'integer';
         	$this->fieldspec['roles_id']['db_data_type'] = 'integer';
         	$this->fieldspec['roles_id']['field_null'] = 'NO';
         	$this->fieldspec['roles_id']['field_key'] = '0';
         	$this->fieldspec['roles_id']['extra_sql'] = ' ';
         	$this->fieldspec['roles_id']['html_form_type'] = 'fddl';
         	$this->fieldspec['roles_id']['html_form_options'] = '<fk><field>roledescription</field><key>roles_id</key></fk>';
         	$this->fieldspec['roles_id']['html_form_explanation'] = ' ';
         	$this->fieldspec['roles_id']['help_text'] = ' ';
         	$this->fieldspec['roles_id']['mandatory_p'] = 'Y';
         	$this->fieldspec['roles_id']['sort_key'] = '0';
         	$this->fieldspec['roles_id']['form_sort_key'] = '0';
         	$this->fieldspec['roles_id']['form_number'] = '1';
         	$this->fieldspec['roles_id']['default_value'] = '';
         	$this->fieldspec['roles_id']['field_toupper'] = 'NO';
         	$this->fieldspec['roles_id']['validationprocname'] = ' ';
         	$this->fieldspec['roles_id']['c_size'] = '8';
         	$this->fieldspec['roles_id']['prikey'] = 'N';
         	$this->fieldspec['roles_id']['noedit'] = 'N';
         	$this->fieldspec['roles_id']['nodisplay'] = 'N';
         	$this->fieldspec['roles_id']['c_unsigned'] = 'N';
         	$this->fieldspec['roles_id']['c_zerofill'] = 'N';
         	$this->fieldspec['roles_id']['c_auto_increment'] = 'N';
         	$this->fieldspec['roles_id']['foreign_table'] = 'roles';
         	$this->fieldspec['roles_id']['foreign_key'] = 'roles_id';
         	$this->fieldspec['roles_id']['application'] = 'acl';
         	$this->fieldspec['roles_id']['issearchable'] = '1';
         	$this->fieldspec['roles_id']['preinserttrigger'] = '';
         	$this->fieldspec['roles_id']['postinserttrigger'] = '';
         	$this->fieldspec['roles_id']['preupdatetrigger'] = '';
         	$this->fieldspec['roles_id']['postupdatetrigger'] = '';
         	$this->fieldspec['roles_id']['predeletetrigger'] = '';
         	$this->fieldspec['roles_id']['postdeletetrigger'] = '';
         	$this->fieldspec['roles_id']['postinsert'] = 'Postroles_idInsert';
         	$this->fieldspec['roles_id']['postupdate'] = 'Postroles_idUpdate';
         	$this->fieldspec['roles_id']['postdelete'] = 'Postroles_idDelete';
         	$this->fieldspec['roles_id']['preinsert'] = 'Preroles_idInsert';
         	$this->fieldspec['roles_id']['preupdate'] = 'Preroles_idUpdate';
         	$this->fieldspec['roles_id']['predelete'] = 'Preroles_idDelete';
         	$this->fieldspec['idtasks']['metadata_id'] = '2886';
         	$this->fieldspec['idtasks']['table_name'] = 'roletask';
         	$this->fieldspec['idtasks']['column_name'] = 'idtasks';
         	$this->fieldspec['idtasks']['pretty_name'] = 'Task';
         	$this->fieldspec['idtasks']['abstract_data_type'] = 'integer';
         	$this->fieldspec['idtasks']['db_data_type'] = 'integer';
         	$this->fieldspec['idtasks']['field_null'] = 'NO';
         	$this->fieldspec['idtasks']['field_key'] = '0';
         	$this->fieldspec['idtasks']['extra_sql'] = ' ';
         	$this->fieldspec['idtasks']['html_form_type'] = 'fddl';
         	$this->fieldspec['idtasks']['html_form_options'] = '<fk><field>taskdescription</field><key>idtasks</key></fk>';
         	$this->fieldspec['idtasks']['html_form_explanation'] = ' ';
         	$this->fieldspec['idtasks']['help_text'] = ' ';
         	$this->fieldspec['idtasks']['mandatory_p'] = 'Y';
         	$this->fieldspec['idtasks']['sort_key'] = '0';
         	$this->fieldspec['idtasks']['form_sort_key'] = '0';
         	$this->fieldspec['idtasks']['form_number'] = '1';
         	$this->fieldspec['idtasks']['default_value'] = '';
         	$this->fieldspec['idtasks']['field_toupper'] = 'NO';
         	$this->fieldspec['idtasks']['validationprocname'] = ' ';
         	$this->fieldspec['idtasks']['c_size'] = '8';
         	$this->fieldspec['idtasks']['prikey'] = 'N';
         	$this->fieldspec['idtasks']['noedit'] = 'N';
         	$this->fieldspec['idtasks']['nodisplay'] = 'N';
         	$this->fieldspec['idtasks']['c_unsigned'] = 'N';
         	$this->fieldspec['idtasks']['c_zerofill'] = 'N';
         	$this->fieldspec['idtasks']['c_auto_increment'] = 'N';
         	$this->fieldspec['idtasks']['foreign_table'] = 'tasks';
         	$this->fieldspec['idtasks']['foreign_key'] = 'idtasks';
         	$this->fieldspec['idtasks']['application'] = 'acl';
         	$this->fieldspec['idtasks']['issearchable'] = '1';
         	$this->fieldspec['idtasks']['preinserttrigger'] = '';
         	$this->fieldspec['idtasks']['postinserttrigger'] = '';
         	$this->fieldspec['idtasks']['preupdatetrigger'] = '';
         	$this->fieldspec['idtasks']['postupdatetrigger'] = '';
         	$this->fieldspec['idtasks']['predeletetrigger'] = '';
         	$this->fieldspec['idtasks']['postdeletetrigger'] = '';
         	$this->fieldspec['idtasks']['postinsert'] = 'PostidtasksInsert';
         	$this->fieldspec['idtasks']['postupdate'] = 'PostidtasksUpdate';
         	$this->fieldspec['idtasks']['postdelete'] = 'PostidtasksDelete';
         	$this->fieldspec['idtasks']['preinsert'] = 'PreidtasksInsert';
         	$this->fieldspec['idtasks']['preupdate'] = 'PreidtasksUpdate';
         	$this->fieldspec['idtasks']['predelete'] = 'PreidtasksDelete';
         	$this->fieldlist = array('idroletask', 'roles_id', 'idtasks');
         	$this->searchlist = array('idroletask', 'roles_id', 'idtasks', );
	         return SUCCESS;
         }
         function roletask()
         { //For older php which doesn't have constructor
              return $this->__construct();
         }
         function Push()
         {
	         $_SESSION['roletask'] = serialize($this);
	         return SUCCESS;
         }
         function Pop()
         {
                 //Can't do this in self - this is how to do it outside
	       //  $this = unserialize($_SESSION['roletask']);
	         return SUCCESS;
         }
         function ObserverRegister( $observer, $event )
         {
                 $this->observers[$event][] = $observer;
	         return SUCCESS;
         }
         function ObserverDeRegister( $observer )
         {
                 $this->observers[] = array_diff( $this->observers, array( $observer) );
	         return SUCCESS;
         }
         function ObserverNotify( $event, $msg )
         {
                 if ( isset( $this->observers[$event] ) )
                 	foreach ( $this->observers[$event] as $obs ) 
                 	{
                      		$obs->notify( $event, $msg );
                 	}
                 /* '**' being used as 'ALL' */
                 if ( isset( $this->observers['**'] ) )
                 	foreach ( $this->observers['**'] as $obs ) 
                 	{
                      		$obs->notify( $event, $msg );
                 	}
	         return SUCCESS;
         }
         function notify( $object )
         {
                 //Called when another object we are observing sends us a notification
	         return SUCCESS;
         }
         function PreidroletaskInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreidroletaskInsert ) )
	            return PreidroletaskInsert( $this );
                 else return;
         }
         function PostidroletaskInsert( $data, $lastinsert = 0 )
         {
         $this->data = $data;
                 if ( is_callable( PostidroletaskInsert ) )
	            return PostidroletaskInsert( $this );
                 else return;
         }
         function PreidroletaskUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreidroletaskUpdate ) )
	            return PreidroletaskUpdate( $this );
                 else return;
         }
         function PostidroletaskUpdate( $data, $lastinsert = 0 )
         {
         $this->data = $data;
                 if ( is_callable( PostidroletaskUpdate ) )
	            return PostidroletaskUpdate( $this );
                 else return;
         }
         function PreidroletaskDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreidroletaskDelete ) )
	            return PreidroletaskDelete( $this );
                 else return;
         }
         function PostidroletaskDelete( $data, $lastinsert = 0 )
         {
         $this->data = $data;
                 if ( is_callable( PostidroletaskDelete ) )
	            return PostidroletaskDelete( $this );
                 else return;
         }
         function Setidroletask($value)
         {
                 $this->idroletask = $value;
	          return SUCCESS;
         }
         function Getidroletask()
         {
                    return $this->idroletask;
         }
         function Preroles_idInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( Preroles_idInsert ) )
	            return Preroles_idInsert( $this );
                 else return;
         }
         function Postroles_idInsert( $data, $lastinsert = 0 )
         {
         $this->data = $data;
                 if ( is_callable( Postroles_idInsert ) )
	            return Postroles_idInsert( $this );
                 else return;
         }
         function Preroles_idUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( Preroles_idUpdate ) )
	            return Preroles_idUpdate( $this );
                 else return;
         }
         function Postroles_idUpdate( $data, $lastinsert = 0 )
         {
         $this->data = $data;
                 if ( is_callable( Postroles_idUpdate ) )
	            return Postroles_idUpdate( $this );
                 else return;
         }
         function Preroles_idDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( Preroles_idDelete ) )
	            return Preroles_idDelete( $this );
                 else return;
         }
         function Postroles_idDelete( $data, $lastinsert = 0 )
         {
         $this->data = $data;
                 if ( is_callable( Postroles_idDelete ) )
	            return Postroles_idDelete( $this );
                 else return;
         }
         function Setroles_id($value)
         {
                 $this->roles_id = $value;
	          return SUCCESS;
         }
         function Getroles_id()
         {
                    return $this->roles_id;
         }
         function PreidtasksInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreidtasksInsert ) )
	            return PreidtasksInsert( $this );
                 else return;
         }
         function PostidtasksInsert( $data, $lastinsert = 0 )
         {
         $this->data = $data;
                 if ( is_callable( PostidtasksInsert ) )
	            return PostidtasksInsert( $this );
                 else return;
         }
         function PreidtasksUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreidtasksUpdate ) )
	            return PreidtasksUpdate( $this );
                 else return;
         }
         function PostidtasksUpdate( $data, $lastinsert = 0 )
         {
         $this->data = $data;
                 if ( is_callable( PostidtasksUpdate ) )
	            return PostidtasksUpdate( $this );
                 else return;
         }
         function PreidtasksDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreidtasksDelete ) )
	            return PreidtasksDelete( $this );
                 else return;
         }
         function PostidtasksDelete( $data, $lastinsert = 0 )
         {
         $this->data = $data;
                 if ( is_callable( PostidtasksDelete ) )
	            return PostidtasksDelete( $this );
                 else return;
         }
         function Setidtasks($value)
         {
                 $this->idtasks = $value;
	          return SUCCESS;
         }
         function Getidtasks()
         {
                    return $this->idtasks;
         }
} /* class roletask */
