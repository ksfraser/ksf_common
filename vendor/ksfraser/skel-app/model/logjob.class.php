<?php 
//This file was generated by calling php /var/www/html/codemeta/generator.php interapp 

//this script may only be included - so its better to die if called directly.
if ( strpos( $_SERVER["SCRIPT_NAME"], basename(__FILE__) ) !== false ) {
  header( "location: ../index.php" );
  exit;
}

class logjob extends generictable 
{
          private $observers;
         var $data; //data passed in by other calls         var $idlogjob;
		 /*Index */
         var $ltable;
		 /*Table */
         var $roadnumber;
		 /*Source */
         var $lastindex;
		 /*Last Index */
         function __constructor()
         {
         $this->querytablename = 'logjob';
         $this->fieldspec['idlogjob']['metadata_id'] = '2870';
         $this->fieldspec['idlogjob']['table_name'] = 'logjob';
         $this->fieldspec['idlogjob']['column_name'] = 'idlogjob';
         $this->fieldspec['idlogjob']['pretty_name'] = 'Index';
         $this->fieldspec['idlogjob']['abstract_data_type'] = 'int';
         $this->fieldspec['idlogjob']['db_data_type'] = 'int';
         $this->fieldspec['idlogjob']['field_null'] = 'YES';
         $this->fieldspec['idlogjob']['field_key'] = '';
         $this->fieldspec['idlogjob']['extra_sql'] = ' ';
         $this->fieldspec['idlogjob']['html_form_type'] = 'integer';
         $this->fieldspec['idlogjob']['html_form_options'] = '';
         $this->fieldspec['idlogjob']['html_form_explanation'] = '';
         $this->fieldspec['idlogjob']['help_text'] = '';
         $this->fieldspec['idlogjob']['mandatory_p'] = 'N';
         $this->fieldspec['idlogjob']['sort_key'] = '0';
         $this->fieldspec['idlogjob']['form_sort_key'] = '0';
         $this->fieldspec['idlogjob']['form_number'] = '1';
         $this->fieldspec['idlogjob']['default_value'] = '';
         $this->fieldspec['idlogjob']['field_toupper'] = 'NO';
         $this->fieldspec['idlogjob']['validationprocname'] = '';
         $this->fieldspec['idlogjob']['c_size'] = '10';
         $this->fieldspec['idlogjob']['prikey'] = 'Y';
         $this->fieldspec['idlogjob']['noedit'] = 'Y';
         $this->fieldspec['idlogjob']['nodisplay'] = 'N';
         $this->fieldspec['idlogjob']['c_unsigned'] = 'Y';
         $this->fieldspec['idlogjob']['c_zerofill'] = 'N';
         $this->fieldspec['idlogjob']['c_auto_increment'] = 'Y';
         $this->fieldspec['idlogjob']['foreign_table'] = '';
         $this->fieldspec['idlogjob']['foreign_key'] = '';
         $this->fieldspec['idlogjob']['application'] = 'interapp';
         $this->fieldspec['idlogjob']['issearchable'] = '1';
         $this->fieldspec['idlogjob']['preinserttrigger'] = '';
         $this->fieldspec['idlogjob']['postinserttrigger'] = '';
         $this->fieldspec['idlogjob']['preupdatetrigger'] = '';
         $this->fieldspec['idlogjob']['postupdatetrigger'] = '';
         $this->fieldspec['idlogjob']['predeletetrigger'] = '';
         $this->fieldspec['idlogjob']['postdeletetrigger'] = '';
         $this->fieldspec['ltable']['metadata_id'] = '2871';
         $this->fieldspec['ltable']['table_name'] = 'logjob';
         $this->fieldspec['ltable']['column_name'] = 'ltable';
         $this->fieldspec['ltable']['pretty_name'] = 'Table';
         $this->fieldspec['ltable']['abstract_data_type'] = 'varchar';
         $this->fieldspec['ltable']['db_data_type'] = 'varchar';
         $this->fieldspec['ltable']['field_null'] = 'YES';
         $this->fieldspec['ltable']['field_key'] = '';
         $this->fieldspec['ltable']['extra_sql'] = ' ';
         $this->fieldspec['ltable']['html_form_type'] = 'text';
         $this->fieldspec['ltable']['html_form_options'] = '';
         $this->fieldspec['ltable']['html_form_explanation'] = '';
         $this->fieldspec['ltable']['help_text'] = '';
         $this->fieldspec['ltable']['mandatory_p'] = 'N';
         $this->fieldspec['ltable']['sort_key'] = '0';
         $this->fieldspec['ltable']['form_sort_key'] = '0';
         $this->fieldspec['ltable']['form_number'] = '1';
         $this->fieldspec['ltable']['default_value'] = '';
         $this->fieldspec['ltable']['field_toupper'] = 'NO';
         $this->fieldspec['ltable']['validationprocname'] = '';
         $this->fieldspec['ltable']['c_size'] = '45';
         $this->fieldspec['ltable']['prikey'] = 'N';
         $this->fieldspec['ltable']['noedit'] = 'N';
         $this->fieldspec['ltable']['nodisplay'] = 'N';
         $this->fieldspec['ltable']['c_unsigned'] = 'N';
         $this->fieldspec['ltable']['c_zerofill'] = 'N';
         $this->fieldspec['ltable']['c_auto_increment'] = 'N';
         $this->fieldspec['ltable']['foreign_table'] = '';
         $this->fieldspec['ltable']['foreign_key'] = '';
         $this->fieldspec['ltable']['application'] = 'interapp';
         $this->fieldspec['ltable']['issearchable'] = '1';
         $this->fieldspec['ltable']['preinserttrigger'] = '';
         $this->fieldspec['ltable']['postinserttrigger'] = '';
         $this->fieldspec['ltable']['preupdatetrigger'] = '';
         $this->fieldspec['ltable']['postupdatetrigger'] = '';
         $this->fieldspec['ltable']['predeletetrigger'] = '';
         $this->fieldspec['ltable']['postdeletetrigger'] = '';
         $this->fieldspec['roadnumber']['metadata_id'] = '2872';
         $this->fieldspec['roadnumber']['table_name'] = 'logjob';
         $this->fieldspec['roadnumber']['column_name'] = 'roadnumber';
         $this->fieldspec['roadnumber']['pretty_name'] = 'Source';
         $this->fieldspec['roadnumber']['abstract_data_type'] = 'int';
         $this->fieldspec['roadnumber']['db_data_type'] = 'int';
         $this->fieldspec['roadnumber']['field_null'] = 'YES';
         $this->fieldspec['roadnumber']['field_key'] = '';
         $this->fieldspec['roadnumber']['extra_sql'] = ' ';
         $this->fieldspec['roadnumber']['html_form_type'] = 'integer';
         $this->fieldspec['roadnumber']['html_form_options'] = '';
         $this->fieldspec['roadnumber']['html_form_explanation'] = '';
         $this->fieldspec['roadnumber']['help_text'] = '';
         $this->fieldspec['roadnumber']['mandatory_p'] = 'N';
         $this->fieldspec['roadnumber']['sort_key'] = '0';
         $this->fieldspec['roadnumber']['form_sort_key'] = '0';
         $this->fieldspec['roadnumber']['form_number'] = '1';
         $this->fieldspec['roadnumber']['default_value'] = '';
         $this->fieldspec['roadnumber']['field_toupper'] = 'NO';
         $this->fieldspec['roadnumber']['validationprocname'] = '';
         $this->fieldspec['roadnumber']['c_size'] = '10';
         $this->fieldspec['roadnumber']['prikey'] = 'N';
         $this->fieldspec['roadnumber']['noedit'] = 'N';
         $this->fieldspec['roadnumber']['nodisplay'] = 'N';
         $this->fieldspec['roadnumber']['c_unsigned'] = 'Y';
         $this->fieldspec['roadnumber']['c_zerofill'] = 'N';
         $this->fieldspec['roadnumber']['c_auto_increment'] = 'N';
         $this->fieldspec['roadnumber']['foreign_table'] = '';
         $this->fieldspec['roadnumber']['foreign_key'] = '';
         $this->fieldspec['roadnumber']['application'] = 'interapp';
         $this->fieldspec['roadnumber']['issearchable'] = '1';
         $this->fieldspec['roadnumber']['preinserttrigger'] = '';
         $this->fieldspec['roadnumber']['postinserttrigger'] = '';
         $this->fieldspec['roadnumber']['preupdatetrigger'] = '';
         $this->fieldspec['roadnumber']['postupdatetrigger'] = '';
         $this->fieldspec['roadnumber']['predeletetrigger'] = '';
         $this->fieldspec['roadnumber']['postdeletetrigger'] = '';
         $this->fieldspec['lastindex']['metadata_id'] = '2873';
         $this->fieldspec['lastindex']['table_name'] = 'logjob';
         $this->fieldspec['lastindex']['column_name'] = 'lastindex';
         $this->fieldspec['lastindex']['pretty_name'] = 'Last Index';
         $this->fieldspec['lastindex']['abstract_data_type'] = 'int';
         $this->fieldspec['lastindex']['db_data_type'] = 'int';
         $this->fieldspec['lastindex']['field_null'] = 'YES';
         $this->fieldspec['lastindex']['field_key'] = '';
         $this->fieldspec['lastindex']['extra_sql'] = ' ';
         $this->fieldspec['lastindex']['html_form_type'] = 'integer';
         $this->fieldspec['lastindex']['html_form_options'] = '';
         $this->fieldspec['lastindex']['html_form_explanation'] = '';
         $this->fieldspec['lastindex']['help_text'] = '';
         $this->fieldspec['lastindex']['mandatory_p'] = 'N';
         $this->fieldspec['lastindex']['sort_key'] = '0';
         $this->fieldspec['lastindex']['form_sort_key'] = '0';
         $this->fieldspec['lastindex']['form_number'] = '1';
         $this->fieldspec['lastindex']['default_value'] = '';
         $this->fieldspec['lastindex']['field_toupper'] = 'NO';
         $this->fieldspec['lastindex']['validationprocname'] = '';
         $this->fieldspec['lastindex']['c_size'] = '10';
         $this->fieldspec['lastindex']['prikey'] = 'N';
         $this->fieldspec['lastindex']['noedit'] = 'N';
         $this->fieldspec['lastindex']['nodisplay'] = 'N';
         $this->fieldspec['lastindex']['c_unsigned'] = 'Y';
         $this->fieldspec['lastindex']['c_zerofill'] = 'N';
         $this->fieldspec['lastindex']['c_auto_increment'] = 'N';
         $this->fieldspec['lastindex']['foreign_table'] = '';
         $this->fieldspec['lastindex']['foreign_key'] = '';
         $this->fieldspec['lastindex']['application'] = 'interapp';
         $this->fieldspec['lastindex']['issearchable'] = '1';
         $this->fieldspec['lastindex']['preinserttrigger'] = '';
         $this->fieldspec['lastindex']['postinserttrigger'] = '';
         $this->fieldspec['lastindex']['preupdatetrigger'] = '';
         $this->fieldspec['lastindex']['postupdatetrigger'] = '';
         $this->fieldspec['lastindex']['predeletetrigger'] = '';
         $this->fieldspec['lastindex']['postdeletetrigger'] = '';
         $this->fieldlist = array('idlogjob', 'ltable', 'roadnumber', 'lastindex');
         $this->searchlist = array('idlogjob', 'ltable', 'roadnumber', 'lastindex', );
	         return SUCCESS;
         }
         function logjob()
         { //For older php which doesn't have constructor
              return $this->__constructor();
         }
         function Push()
         {
	         $_SESSION['logjob'] = serialize($this);
	         return SUCCESS;
         }
         function Pop()
         {
                 //Can't do this in self - this is how to do it outside
	       //  $this = unserialize($_SESSION['logjob']);
	         return SUCCESS;
         }
         function ObserverRegister( $observer, $event )
         {
                 $this->observers[$event][] = $observer;
	         return SUCCESS;
         }
         function ObserverDeRegister( $observer )
         {
                 $this->observers[] = array_diff( $this->observers, array( $observer) );
	         return SUCCESS;
         }
         function ObserverNotify( $event, $msg )
         {
                 if ( isset( $this->observers[$event] ) )
                 	foreach ( $this->observers[$event] as $obs ) 
                 	{
                      		$obs->notify( $event, $msg );
                 	}
                 /* '**' being used as 'ALL' */
                 if ( isset( $this->observers['**'] ) )
                 	foreach ( $this->observers['**'] as $obs ) 
                 	{
                      		$obs->notify( $event, $msg );
                 	}
	         return SUCCESS;
         }
         function notify( $object )
         {
                 //Called when another object we are observing sends us a notification
	         return SUCCESS;
         }
         function PreidlogjobInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreidlogjobInsert ) )
	            return PreidlogjobInsert( $this );
                 else return;
         }
         function PostidlogjobInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreidlogjobInsert ) )
	            return PreidlogjobInsert( $this );
                 else return;
         }
         function PreidlogjobUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreidlogjobUpdate ) )
	            return PreidlogjobUpdate( $this );
                 else return;
         }
         function PostidlogjobUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreidlogjobUpdate ) )
	            return PreidlogjobUpdate( $this );
                 else return;
         }
         function PreidlogjobDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreidlogjobDelete ) )
	            return PreidlogjobDelete( $this );
                 else return;
         }
         function PostidlogjobDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreidlogjobDelete ) )
	            return PreidlogjobDelete( $this );
                 else return;
         }
         function Setidlogjob($value)
         {
                 $this->idlogjob = $value;
	          return SUCCESS;
         }
         function Getidlogjob()
         {
                    return $this->idlogjob;
         }
         function PreltableInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreltableInsert ) )
	            return PreltableInsert( $this );
                 else return;
         }
         function PostltableInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreltableInsert ) )
	            return PreltableInsert( $this );
                 else return;
         }
         function PreltableUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreltableUpdate ) )
	            return PreltableUpdate( $this );
                 else return;
         }
         function PostltableUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreltableUpdate ) )
	            return PreltableUpdate( $this );
                 else return;
         }
         function PreltableDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreltableDelete ) )
	            return PreltableDelete( $this );
                 else return;
         }
         function PostltableDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreltableDelete ) )
	            return PreltableDelete( $this );
                 else return;
         }
         function Setltable($value)
         {
                 $this->ltable = $value;
	          return SUCCESS;
         }
         function Getltable()
         {
                    return $this->ltable;
         }
         function PreroadnumberInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreroadnumberInsert ) )
	            return PreroadnumberInsert( $this );
                 else return;
         }
         function PostroadnumberInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreroadnumberInsert ) )
	            return PreroadnumberInsert( $this );
                 else return;
         }
         function PreroadnumberUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreroadnumberUpdate ) )
	            return PreroadnumberUpdate( $this );
                 else return;
         }
         function PostroadnumberUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreroadnumberUpdate ) )
	            return PreroadnumberUpdate( $this );
                 else return;
         }
         function PreroadnumberDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreroadnumberDelete ) )
	            return PreroadnumberDelete( $this );
                 else return;
         }
         function PostroadnumberDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PreroadnumberDelete ) )
	            return PreroadnumberDelete( $this );
                 else return;
         }
         function Setroadnumber($value)
         {
                 $this->roadnumber = $value;
	          return SUCCESS;
         }
         function Getroadnumber()
         {
                    return $this->roadnumber;
         }
         function PrelastindexInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PrelastindexInsert ) )
	            return PrelastindexInsert( $this );
                 else return;
         }
         function PostlastindexInsert( $data )
         {
         $this->data = $data;
                 if ( is_callable( PrelastindexInsert ) )
	            return PrelastindexInsert( $this );
                 else return;
         }
         function PrelastindexUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PrelastindexUpdate ) )
	            return PrelastindexUpdate( $this );
                 else return;
         }
         function PostlastindexUpdate( $data )
         {
         $this->data = $data;
                 if ( is_callable( PrelastindexUpdate ) )
	            return PrelastindexUpdate( $this );
                 else return;
         }
         function PrelastindexDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PrelastindexDelete ) )
	            return PrelastindexDelete( $this );
                 else return;
         }
         function PostlastindexDelete( $data )
         {
         $this->data = $data;
                 if ( is_callable( PrelastindexDelete ) )
	            return PrelastindexDelete( $this );
                 else return;
         }
         function Setlastindex($value)
         {
                 $this->lastindex = $value;
	          return SUCCESS;
         }
         function Getlastindex()
         {
                    return $this->lastindex;
         }
} /* class logjob */
